# -*- coding: utf-8 -*-
"""Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FWi6dMCtfA7I5FtdH5P3v22HB_4ZMQwr

**Buat Class dan Methods**
"""

import pandas as pd

class Transaction:
  
  def __init__(self):
    '''
    fungsi menginisialisasi dictionary data item
    '''
    self.data_item = dict()

  def add_item(self):
    '''
    fungsi menambahkan data item
    nama_item sebagai key, dan jumlah_item dan harga_per_item sebagai value

    parameters
    nama_item       : str nama item yang dibeli
    jumlah_item     : int jumlah item yang dibeli
    harga_per_item  : int harga per item
    total_harga     : int total harga item
    '''
    nama_item = input('Masukkan nama item: ')
    jumlah_item = int(input('Masukkan jumlah item: '))
    harga_per_item = int(input('Masukkan harga per item: '))
    total_harga = jumlah_item*harga_per_item
    self.data_item.update({nama_item: [jumlah_item, harga_per_item, total_harga]})

  def update_item_name(self, nama_item, nama_item_baru):
    '''
    fungsi untuk memperbarui nama item di record yang sudah ada

    parameters
    nama_item_       : str nama item yang ingin diperbarui namanya
    nama_item_baru   : str nama item yang diperbarui
    '''
    temp = self.data_item[nama_item]
    self.data_item.pop(nama_item)
    self.data_item.update({nama_item_baru: temp})

  def update_item_qty(self, nama_item, jumlah_item_baru):
    '''
    fungsi untuk memperbarui jumlah item di record yang sudah ada

    parameters
    nama_item        : str nama item yang ingin diperbarui jumlahnya
    jumlah_item_baru : int jumlah item yang diperbarui
    '''
    self.data_item[nama_item][0] = jumlah_item_baru

  def update_item_price(self, nama_item, harga_per_item_baru):
    '''
    fungsi untuk memperbarui harga per item di record yang sudah ada

    parameters
    nama_item           : str nama item yang ingin diperbarui harga per itemnya
    harga_per_item_baru : int harga per item item yang diperbarui
    '''
    self.data_item[nama_item][1] = harga_per_item_baru
  
  def update_total_harga(self, nama_item, total_harga_baru):
    '''
    fungsi untuk mengupdate total harga
    '''
    self.data_item[nama_item][2] = total_harga_baru
 
  def check_data_item(self):
    '''
    fungsi untuk mengecek data item yang sudah diinput
    '''
    if(len(self.data_item) == 0):
      print('Terdapat kesalahan input data')
    else:
      # print(self.data_item)
      print('Pesanan berhasil, berikut pesanan Anda: ')
      data = pd.DataFrame(self.data_item).T
      data.columns = ['Jumlah item', 'Harga/item', 'Total Harga']
      print(data.to_markdown())
  
  def total_belanja(self):
    '''
    fungsi untuk menjumlahkan semua belanja
    '''
    total_belanja = sum(total_harga)
      if total_belanja >= 200000 and < 300000:
        total_belanja*0.95
        print('Total belanja anda adalah {total_belanja}')
      elif total belanja >= 300000 and < 500000:
        total_belanja*0.92
        print('Total belanja anda adalah {total_belanja}')
      elif total belanja >= 500000:
        total_belanja*0.9
        print('Total belanja anda adalah {total_belanja}')
      else:
        total_belanja*1
        print('Total belanja anda adalah {total_belanja}')
    
  def delete_item(self):
    '''
    fungsi untuk menghapus item yang tidak jadi dibeli
    '''
    data_item.pop({nama_item})
  
  def reset_data(self):
    '''
    fungsi untuk pembatalan pembelian (semua transaksi)
    '''
    self.data_item.clear()

"""**Test Case**"""

trnsct_123 = Transaction()

trnsct_123.add_item()

trnsct_123.check_data_item()

trnsct_123.add_item()

trnsct_123.check_data_item()

trnsct_123.add_item()

trnsct_123.check_data_item()